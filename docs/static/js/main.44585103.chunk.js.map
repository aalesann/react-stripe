{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["stripePromise","loadStripe","CheckoutForm","stripe","useStripe","elements","useElements","useState","loading","setLoading","handleSubmit","e","a","preventDefault","createPaymentMethod","type","card","getElement","CardElement","error","paymentMethod","id","axios","post","amount","data","console","log","clear","onSubmit","className","src","alt","disabled","role","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wRAOMA,G,YAAgBC,YAAW,+CAE3BC,EAAe,WAEnB,IAAMC,EAASC,sBACTC,EAAWC,wBAHQ,EAIKC,oBAAS,GAJd,mBAIlBC,EAJkB,KAITC,EAJS,KAKnBC,EAAY,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DACnBD,EAAEE,iBADiB,SAGoBV,EAAOW,oBAAoB,CAChEC,KAAM,OACNC,KAAMX,EAASY,WAAWC,iBALT,mBAGXC,EAHW,EAGXA,MAAOC,EAHI,EAGJA,cAIfX,GAAW,GAENU,EATc,wBAUTE,EAAOD,EAAPC,GAVS,mBAaQC,IAAMC,KAAK,qCAAsC,CACxEF,KACAG,OAAQ,MAfO,iBAaPC,EAbO,EAaPA,KAIVC,QAAQC,IAAIF,GAjBK,kDAmBjBC,QAAQC,IAAR,MAnBiB,QAqBjBlB,GAAW,GACXJ,EAASY,WAAWC,eAAaU,QAtBhB,0DAAH,sDA4BlB,OACE,0BACEC,SAAUnB,EACVoB,UAAU,kBAEV,yBAAKC,IAAI,8IACPC,IAAI,UACJF,UAAU,cAGZ,wBAAIA,UAAU,yBAAd,gBAEA,yBAAKA,UAAU,mBACb,kBAAC,cAAD,CAAaA,UAAU,kBAEzB,4BACEA,UAAU,kBACVG,UAAW9B,GAETK,EACA,yBAAKsB,UAAU,4BAA4BI,KAAK,UAC9C,0BAAMJ,UAAU,eAEhB,aAmBGK,MAdf,WACE,OACE,kBAAC,WAAD,CAAUhC,OAAQH,GAChB,yBAAK8B,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,WChEQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLO,QAAQP,MAAMA,EAAMkC,c","file":"static/js/main.44585103.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport axios from 'axios'\nimport 'bootswatch/dist/lux/bootstrap.min.css';\nimport './App.css';\n\nconst stripePromise = loadStripe(\"pk_test_5ZVogOffJl7U1nve3RSN8wId00nSBik89H\");\n\nconst CheckoutForm = () => {\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement)\n    });\n    setLoading(true);\n\n    if (!error) {\n      const { id } = paymentMethod;\n\n      try {\n        const { data } = await axios.post('http://localhost:3001/api/checkout', {\n        id,\n        amount: 1000 * 200        \n      });\n      console.log(data)\n    } catch (error) {\n      console.log(error)\n    }\n      setLoading(false);\n      elements.getElement(CardElement).clear();\n\n    }\n\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"card card-body\"\n    >\n      <img src=\"https://d26lpennugtm8s.cloudfront.net/stores/062/220/products/786225-mla25393395945_022017-o-f98ac58a7b7b13c73315121940399663-1024-1024.jpg\"\n        alt=\"Monitor\"\n        className=\"img-fluid\"\n      />\n\n      <h3 className=\"text-center mt-4 mb-1\">Precio: $100</h3>\n\n      <div className=\"form-group mt-2\">\n        <CardElement className=\"form-control\" />\n      </div>\n      <button \n        className=\"btn btn-success\" \n        disabled={!stripe}\n      >\n        { loading ? (\n          <div className=\"spinner-border text-light\" role=\"status\">\n            <span className=\"sr-online\"></span>\n          </div>\n        ) : \"Comprar\" }\n      </button>\n    </form>)\n}\n\nfunction App() {\n  return (\n    <Elements stripe={stripePromise}>\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-md-4 offset-md-4\">\n            <CheckoutForm />\n          </div>\n        </div>\n      </div>\n    </Elements>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}